<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="1683"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="325" width="0.0594%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.06%)</title><rect x="0.0000%" y="309" width="0.0594%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="293" width="0.0594%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="277" width="0.0594%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="261" width="0.0594%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="245" width="0.0594%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.06%)</title><rect x="0.0000%" y="229" width="0.0594%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="213" width="0.0594%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="197" width="0.0594%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="181" width="0.0594%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="165" width="0.0594%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="149" width="0.0594%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0000%" y="133" width="0.0594%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.12%)</title><rect x="0.0000%" y="357" width="0.1188%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.12%)</title><rect x="0.0000%" y="341" width="0.1188%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="2"/><text x="0.2500%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="325" width="0.0594%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.3094%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="309" width="0.0594%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.3094%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="293" width="0.0594%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.3094%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="277" width="0.0594%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.3094%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="261" width="0.0594%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.3094%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="245" width="0.0594%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.3094%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="229" width="0.0594%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.3094%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="213" width="0.0594%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.3094%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.0594%" y="197" width="0.0594%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.3094%" y="207.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.36%)</title><rect x="0.0000%" y="373" width="0.3565%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="6"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.24%)</title><rect x="0.1188%" y="357" width="0.2377%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="4"/><text x="0.3688%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.24%)</title><rect x="0.1188%" y="341" width="0.2377%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="4"/><text x="0.3688%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.24%)</title><rect x="0.1188%" y="325" width="0.2377%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="4"/><text x="0.3688%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.24%)</title><rect x="0.1188%" y="309" width="0.2377%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="4"/><text x="0.3688%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.18%)</title><rect x="0.1783%" y="293" width="0.1783%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="3"/><text x="0.4283%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.12%)</title><rect x="0.2377%" y="277" width="0.1188%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="2"/><text x="0.4877%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.12%)</title><rect x="0.2377%" y="261" width="0.1188%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="2"/><text x="0.4877%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.12%)</title><rect x="0.2377%" y="245" width="0.1188%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="2"/><text x="0.4877%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.12%)</title><rect x="0.2377%" y="229" width="0.1188%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="2"/><text x="0.4877%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.2971%" y="213" width="0.0594%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.5471%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.42%)</title><rect x="0.0000%" y="389" width="0.4159%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="7"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="373" width="0.0594%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.6065%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="357" width="0.0594%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="0.6065%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="341" width="0.0594%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="0.6065%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="325" width="0.0594%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="0.6065%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="309" width="0.0594%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="1"/><text x="0.6065%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="293" width="0.0594%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="0.6065%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.06%)</title><rect x="0.3565%" y="277" width="0.0594%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="0.6065%" y="287.50"></text></g><g><title>chess::game::board::del_vec (1 samples, 0.06%)</title><rect x="0.4753%" y="277" width="0.0594%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.7253%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (1 samples, 0.06%)</title><rect x="0.4753%" y="261" width="0.0594%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="0.7253%" y="271.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.06%)</title><rect x="0.4753%" y="245" width="0.0594%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="0.7253%" y="255.50"></text></g><g><title>chess::game::board::replace_vec (1 samples, 0.06%)</title><rect x="0.5348%" y="277" width="0.0594%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="1"/><text x="0.7848%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.06%)</title><rect x="0.5348%" y="261" width="0.0594%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.7848%" y="271.50"></text></g><g><title>chess::game::board::Board::make_move (4 samples, 0.24%)</title><rect x="0.4159%" y="293" width="0.2377%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="4"/><text x="0.6659%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="0.5942%" y="277" width="0.0594%" height="15" fill="rgb(206,27,48)" fg:x="10" fg:w="1"/><text x="0.8442%" y="287.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="0.5942%" y="261" width="0.0594%" height="15" fill="rgb(225,35,8)" fg:x="10" fg:w="1"/><text x="0.8442%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.06%)</title><rect x="0.6536%" y="277" width="0.0594%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="0.9036%" y="287.50"></text></g><g><title>core::ptr::read (1 samples, 0.06%)</title><rect x="0.6536%" y="261" width="0.0594%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="0.9036%" y="271.50"></text></g><g><title>chess::game::board::Board::undo_move (2 samples, 0.12%)</title><rect x="0.6536%" y="293" width="0.1188%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="2"/><text x="0.9036%" y="303.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="0.7130%" y="277" width="0.0594%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="0.9630%" y="287.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="0.7130%" y="261" width="0.0594%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="0.9630%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.18%)</title><rect x="0.9507%" y="277" width="0.1783%" height="15" fill="rgb(217,147,25)" fg:x="16" fg:w="3"/><text x="1.2007%" y="287.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.12%)</title><rect x="1.0101%" y="261" width="0.1188%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="2"/><text x="1.2601%" y="271.50"></text></g><g><title>&lt;chess::game::move::Move as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="2.8520%" y="261" width="0.0594%" height="15" fill="rgb(209,12,38)" fg:x="48" fg:w="1"/><text x="3.1020%" y="271.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="2.8520%" y="245" width="0.0594%" height="15" fill="rgb(227,1,9)" fg:x="48" fg:w="1"/><text x="3.1020%" y="255.50"></text></g><g><title>&lt;chess::game::move::MoveType as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="2.9115%" y="261" width="0.0594%" height="15" fill="rgb(248,47,43)" fg:x="49" fg:w="1"/><text x="3.1615%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.18%)</title><rect x="2.9709%" y="261" width="0.1783%" height="15" fill="rgb(221,10,30)" fg:x="50" fg:w="3"/><text x="3.2209%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="3.0897%" y="245" width="0.0594%" height="15" fill="rgb(210,229,1)" fg:x="52" fg:w="1"/><text x="3.3397%" y="255.50"></text></g><g><title>chess::game::board::Board::get_piece_position_mut (3 samples, 0.18%)</title><rect x="3.1491%" y="261" width="0.1783%" height="15" fill="rgb(222,148,37)" fg:x="53" fg:w="3"/><text x="3.3991%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.06%)</title><rect x="3.2680%" y="245" width="0.0594%" height="15" fill="rgb(234,67,33)" fg:x="55" fg:w="1"/><text x="3.5180%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.06%)</title><rect x="3.2680%" y="229" width="0.0594%" height="15" fill="rgb(247,98,35)" fg:x="55" fg:w="1"/><text x="3.5180%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="3.2680%" y="213" width="0.0594%" height="15" fill="rgb(247,138,52)" fg:x="55" fg:w="1"/><text x="3.5180%" y="223.50"></text></g><g><title>chess::game::board::Board::set_piece (2 samples, 0.12%)</title><rect x="3.3274%" y="261" width="0.1188%" height="15" fill="rgb(213,79,30)" fg:x="56" fg:w="2"/><text x="3.5774%" y="271.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.06%)</title><rect x="3.4462%" y="229" width="0.0594%" height="15" fill="rgb(246,177,23)" fg:x="58" fg:w="1"/><text x="3.6962%" y="239.50"></text></g><g><title>chess::game::board::del_vec (2 samples, 0.12%)</title><rect x="3.4462%" y="261" width="0.1188%" height="15" fill="rgb(230,62,27)" fg:x="58" fg:w="2"/><text x="3.6962%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (2 samples, 0.12%)</title><rect x="3.4462%" y="245" width="0.1188%" height="15" fill="rgb(216,154,8)" fg:x="58" fg:w="2"/><text x="3.6962%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="3.5056%" y="229" width="0.0594%" height="15" fill="rgb(244,35,45)" fg:x="59" fg:w="1"/><text x="3.7556%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.42%)</title><rect x="4.0404%" y="229" width="0.4159%" height="15" fill="rgb(251,115,12)" fg:x="68" fg:w="7"/><text x="4.2904%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.36%)</title><rect x="4.0998%" y="213" width="0.3565%" height="15" fill="rgb(240,54,50)" fg:x="69" fg:w="6"/><text x="4.3498%" y="223.50"></text></g><g><title>chess::game::board::replace_vec (16 samples, 0.95%)</title><rect x="3.5651%" y="261" width="0.9507%" height="15" fill="rgb(233,84,52)" fg:x="60" fg:w="16"/><text x="3.8151%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (16 samples, 0.95%)</title><rect x="3.5651%" y="245" width="0.9507%" height="15" fill="rgb(207,117,47)" fg:x="60" fg:w="16"/><text x="3.8151%" y="255.50"></text></g><g><title>chess::game::board::replace_vec::_{{closure}} (1 samples, 0.06%)</title><rect x="4.4563%" y="229" width="0.0594%" height="15" fill="rgb(249,43,39)" fg:x="75" fg:w="1"/><text x="4.7063%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (1 samples, 0.06%)</title><rect x="4.4563%" y="213" width="0.0594%" height="15" fill="rgb(209,38,44)" fg:x="75" fg:w="1"/><text x="4.7063%" y="223.50"></text></g><g><title>chess::game::board::Board::make_move (58 samples, 3.45%)</title><rect x="1.1289%" y="277" width="3.4462%" height="15" fill="rgb(236,212,23)" fg:x="19" fg:w="58"/><text x="1.3789%" y="287.50">che..</text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="4.5157%" y="261" width="0.0594%" height="15" fill="rgb(242,79,21)" fg:x="76" fg:w="1"/><text x="4.7657%" y="271.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="4.5157%" y="245" width="0.0594%" height="15" fill="rgb(211,96,35)" fg:x="76" fg:w="1"/><text x="4.7657%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.12%)</title><rect x="5.5258%" y="261" width="0.1188%" height="15" fill="rgb(253,215,40)" fg:x="93" fg:w="2"/><text x="5.7758%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.36%)</title><rect x="6.2389%" y="229" width="0.3565%" height="15" fill="rgb(211,81,21)" fg:x="105" fg:w="6"/><text x="6.4889%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.30%)</title><rect x="6.2983%" y="213" width="0.2971%" height="15" fill="rgb(208,190,38)" fg:x="106" fg:w="5"/><text x="6.5483%" y="223.50"></text></g><g><title>chess::game::board::replace_vec (17 samples, 1.01%)</title><rect x="5.6447%" y="261" width="1.0101%" height="15" fill="rgb(235,213,38)" fg:x="95" fg:w="17"/><text x="5.8947%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (17 samples, 1.01%)</title><rect x="5.6447%" y="245" width="1.0101%" height="15" fill="rgb(237,122,38)" fg:x="95" fg:w="17"/><text x="5.8947%" y="255.50"></text></g><g><title>chess::game::board::replace_vec::_{{closure}} (1 samples, 0.06%)</title><rect x="6.5954%" y="229" width="0.0594%" height="15" fill="rgb(244,218,35)" fg:x="111" fg:w="1"/><text x="6.8454%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (1 samples, 0.06%)</title><rect x="6.5954%" y="213" width="0.0594%" height="15" fill="rgb(240,68,47)" fg:x="111" fg:w="1"/><text x="6.8454%" y="223.50"></text></g><g><title>core::cmp::PartialEq::ne (14 samples, 0.83%)</title><rect x="6.6548%" y="261" width="0.8318%" height="15" fill="rgb(210,16,53)" fg:x="112" fg:w="14"/><text x="6.9048%" y="271.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (14 samples, 0.83%)</title><rect x="6.6548%" y="245" width="0.8318%" height="15" fill="rgb(235,124,12)" fg:x="112" fg:w="14"/><text x="6.9048%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13 samples, 0.77%)</title><rect x="7.4866%" y="261" width="0.7724%" height="15" fill="rgb(224,169,11)" fg:x="126" fg:w="13"/><text x="7.7366%" y="271.50"></text></g><g><title>chess::game::board::Board::undo_move::_{{closure}} (13 samples, 0.77%)</title><rect x="7.4866%" y="245" width="0.7724%" height="15" fill="rgb(250,166,2)" fg:x="126" fg:w="13"/><text x="7.7366%" y="255.50"></text></g><g><title>&lt;chess::game::move::MoveType as core::cmp::PartialEq&gt;::eq (13 samples, 0.77%)</title><rect x="7.4866%" y="229" width="0.7724%" height="15" fill="rgb(242,216,29)" fg:x="126" fg:w="13"/><text x="7.7366%" y="239.50"></text></g><g><title>chess::game::board::Board::undo_move (65 samples, 3.86%)</title><rect x="4.5752%" y="277" width="3.8622%" height="15" fill="rgb(230,116,27)" fg:x="77" fg:w="65"/><text x="4.8252%" y="287.50">ches..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (3 samples, 0.18%)</title><rect x="8.2591%" y="261" width="0.1783%" height="15" fill="rgb(228,99,48)" fg:x="139" fg:w="3"/><text x="8.5091%" y="271.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.77%)</title><rect x="17.7065%" y="245" width="0.7724%" height="15" fill="rgb(253,11,6)" fg:x="298" fg:w="13"/><text x="17.9565%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.77%)</title><rect x="17.7065%" y="229" width="0.7724%" height="15" fill="rgb(247,143,39)" fg:x="298" fg:w="13"/><text x="17.9565%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.06%)</title><rect x="18.4195%" y="213" width="0.0594%" height="15" fill="rgb(236,97,10)" fg:x="310" fg:w="1"/><text x="18.6695%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.06%)</title><rect x="18.4195%" y="197" width="0.0594%" height="15" fill="rgb(233,208,19)" fg:x="310" fg:w="1"/><text x="18.6695%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.83%)</title><rect x="18.4789%" y="245" width="0.8318%" height="15" fill="rgb(216,164,2)" fg:x="311" fg:w="14"/><text x="18.7289%" y="255.50"></text></g><g><title>core::ptr::read (3 samples, 0.18%)</title><rect x="19.1325%" y="229" width="0.1783%" height="15" fill="rgb(220,129,5)" fg:x="322" fg:w="3"/><text x="19.3825%" y="239.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="19.3108%" y="245" width="0.0594%" height="15" fill="rgb(242,17,10)" fg:x="325" fg:w="1"/><text x="19.5608%" y="255.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="19.3108%" y="229" width="0.0594%" height="15" fill="rgb(242,107,0)" fg:x="325" fg:w="1"/><text x="19.5608%" y="239.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (1 samples, 0.06%)</title><rect x="19.3108%" y="213" width="0.0594%" height="15" fill="rgb(251,28,31)" fg:x="325" fg:w="1"/><text x="19.5608%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 1.72%)</title><rect x="19.3702%" y="245" width="1.7231%" height="15" fill="rgb(233,223,10)" fg:x="326" fg:w="29"/><text x="19.6202%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.30%)</title><rect x="20.7962%" y="229" width="0.2971%" height="15" fill="rgb(215,21,27)" fg:x="350" fg:w="5"/><text x="21.0462%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.36%)</title><rect x="23.3512%" y="229" width="0.3565%" height="15" fill="rgb(232,23,21)" fg:x="393" fg:w="6"/><text x="23.6012%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (62 samples, 3.68%)</title><rect x="21.0933%" y="245" width="3.6839%" height="15" fill="rgb(244,5,23)" fg:x="355" fg:w="62"/><text x="21.3433%" y="255.50">allo..</text></g><g><title>core::ptr::write (18 samples, 1.07%)</title><rect x="23.7077%" y="229" width="1.0695%" height="15" fill="rgb(226,81,46)" fg:x="399" fg:w="18"/><text x="23.9577%" y="239.50"></text></g><g><title>__rdl_alloc (36 samples, 2.14%)</title><rect x="25.0743%" y="133" width="2.1390%" height="15" fill="rgb(247,70,30)" fg:x="422" fg:w="36"/><text x="25.3243%" y="143.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (36 samples, 2.14%)</title><rect x="25.0743%" y="117" width="2.1390%" height="15" fill="rgb(212,68,19)" fg:x="422" fg:w="36"/><text x="25.3243%" y="127.50">s..</text></g><g><title>malloc (33 samples, 1.96%)</title><rect x="25.2525%" y="101" width="1.9608%" height="15" fill="rgb(240,187,13)" fg:x="425" fg:w="33"/><text x="25.5025%" y="111.50">m..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 2.20%)</title><rect x="25.0743%" y="181" width="2.1985%" height="15" fill="rgb(223,113,26)" fg:x="422" fg:w="37"/><text x="25.3243%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 2.20%)</title><rect x="25.0743%" y="165" width="2.1985%" height="15" fill="rgb(206,192,2)" fg:x="422" fg:w="37"/><text x="25.3243%" y="175.50">a..</text></g><g><title>alloc::alloc::alloc (37 samples, 2.20%)</title><rect x="25.0743%" y="149" width="2.1985%" height="15" fill="rgb(241,108,4)" fg:x="422" fg:w="37"/><text x="25.3243%" y="159.50">a..</text></g><g><title>core::ptr::read_volatile (1 samples, 0.06%)</title><rect x="27.2133%" y="133" width="0.0594%" height="15" fill="rgb(247,173,49)" fg:x="458" fg:w="1"/><text x="27.4633%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43 samples, 2.55%)</title><rect x="24.7772%" y="245" width="2.5550%" height="15" fill="rgb(224,114,35)" fg:x="417" fg:w="43"/><text x="25.0272%" y="255.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 2.55%)</title><rect x="24.7772%" y="229" width="2.5550%" height="15" fill="rgb(245,159,27)" fg:x="417" fg:w="43"/><text x="25.0272%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 2.50%)</title><rect x="24.8366%" y="213" width="2.4955%" height="15" fill="rgb(245,172,44)" fg:x="418" fg:w="42"/><text x="25.0866%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42 samples, 2.50%)</title><rect x="24.8366%" y="197" width="2.4955%" height="15" fill="rgb(236,23,11)" fg:x="418" fg:w="42"/><text x="25.0866%" y="207.50">al..</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.06%)</title><rect x="27.2727%" y="181" width="0.0594%" height="15" fill="rgb(205,117,38)" fg:x="459" fg:w="1"/><text x="27.5227%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.06%)</title><rect x="27.2727%" y="165" width="0.0594%" height="15" fill="rgb(237,72,25)" fg:x="459" fg:w="1"/><text x="27.5227%" y="175.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="29.4118%" y="213" width="0.0594%" height="15" fill="rgb(244,70,9)" fg:x="495" fg:w="1"/><text x="29.6618%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="30.1248%" y="197" width="0.1188%" height="15" fill="rgb(217,125,39)" fg:x="507" fg:w="2"/><text x="30.3748%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.12%)</title><rect x="30.1248%" y="181" width="0.1188%" height="15" fill="rgb(235,36,10)" fg:x="507" fg:w="2"/><text x="30.3748%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="30.1248%" y="165" width="0.1188%" height="15" fill="rgb(251,123,47)" fg:x="507" fg:w="2"/><text x="30.3748%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.12%)</title><rect x="30.1248%" y="149" width="0.1188%" height="15" fill="rgb(221,13,13)" fg:x="507" fg:w="2"/><text x="30.3748%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.12%)</title><rect x="30.1248%" y="133" width="0.1188%" height="15" fill="rgb(238,131,9)" fg:x="507" fg:w="2"/><text x="30.3748%" y="143.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.12%)</title><rect x="30.1248%" y="117" width="0.1188%" height="15" fill="rgb(211,50,8)" fg:x="507" fg:w="2"/><text x="30.3748%" y="127.50"></text></g><g><title>__rdl_realloc (2 samples, 0.12%)</title><rect x="30.1248%" y="101" width="0.1188%" height="15" fill="rgb(245,182,24)" fg:x="507" fg:w="2"/><text x="30.3748%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.12%)</title><rect x="30.1248%" y="85" width="0.1188%" height="15" fill="rgb(242,14,37)" fg:x="507" fg:w="2"/><text x="30.3748%" y="95.50"></text></g><g><title>realloc (2 samples, 0.12%)</title><rect x="30.1248%" y="69" width="0.1188%" height="15" fill="rgb(246,228,12)" fg:x="507" fg:w="2"/><text x="30.3748%" y="79.50"></text></g><g><title>[libc.so.6] (2 samples, 0.12%)</title><rect x="30.1248%" y="53" width="0.1188%" height="15" fill="rgb(213,55,15)" fg:x="507" fg:w="2"/><text x="30.3748%" y="63.50"></text></g><g><title>[libc.so.6] (2 samples, 0.12%)</title><rect x="30.1248%" y="37" width="0.1188%" height="15" fill="rgb(209,9,3)" fg:x="507" fg:w="2"/><text x="30.3748%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.18%)</title><rect x="30.2436%" y="197" width="0.1783%" height="15" fill="rgb(230,59,30)" fg:x="509" fg:w="3"/><text x="30.4936%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.18%)</title><rect x="30.2436%" y="181" width="0.1783%" height="15" fill="rgb(209,121,21)" fg:x="509" fg:w="3"/><text x="30.4936%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 1.43%)</title><rect x="29.4712%" y="213" width="1.4260%" height="15" fill="rgb(220,109,13)" fg:x="496" fg:w="24"/><text x="29.7212%" y="223.50"></text></g><g><title>core::ptr::write (8 samples, 0.48%)</title><rect x="30.4219%" y="197" width="0.4753%" height="15" fill="rgb(232,18,1)" fg:x="512" fg:w="8"/><text x="30.6719%" y="207.50"></text></g><g><title>chess::game::eval::add_bishop_moves (77 samples, 4.58%)</title><rect x="27.3321%" y="245" width="4.5752%" height="15" fill="rgb(215,41,42)" fg:x="460" fg:w="77"/><text x="27.5821%" y="255.50">chess..</text></g><g><title>chess::game::eval::try_add_move (66 samples, 3.92%)</title><rect x="27.9857%" y="229" width="3.9216%" height="15" fill="rgb(224,123,36)" fg:x="471" fg:w="66"/><text x="28.2357%" y="239.50">ches..</text></g><g><title>chess::game::board::Board::get_piece (17 samples, 1.01%)</title><rect x="30.8972%" y="213" width="1.0101%" height="15" fill="rgb(240,125,3)" fg:x="520" fg:w="17"/><text x="31.1472%" y="223.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="33.9275%" y="213" width="0.0594%" height="15" fill="rgb(205,98,50)" fg:x="571" fg:w="1"/><text x="34.1775%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="34.0463%" y="197" width="0.1188%" height="15" fill="rgb(205,185,37)" fg:x="573" fg:w="2"/><text x="34.2963%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.12%)</title><rect x="34.0463%" y="181" width="0.1188%" height="15" fill="rgb(238,207,15)" fg:x="573" fg:w="2"/><text x="34.2963%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="34.0463%" y="165" width="0.1188%" height="15" fill="rgb(213,199,42)" fg:x="573" fg:w="2"/><text x="34.2963%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.12%)</title><rect x="34.0463%" y="149" width="0.1188%" height="15" fill="rgb(235,201,11)" fg:x="573" fg:w="2"/><text x="34.2963%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.12%)</title><rect x="34.0463%" y="133" width="0.1188%" height="15" fill="rgb(207,46,11)" fg:x="573" fg:w="2"/><text x="34.2963%" y="143.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.12%)</title><rect x="34.0463%" y="117" width="0.1188%" height="15" fill="rgb(241,35,35)" fg:x="573" fg:w="2"/><text x="34.2963%" y="127.50"></text></g><g><title>__rdl_realloc (2 samples, 0.12%)</title><rect x="34.0463%" y="101" width="0.1188%" height="15" fill="rgb(243,32,47)" fg:x="573" fg:w="2"/><text x="34.2963%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.12%)</title><rect x="34.0463%" y="85" width="0.1188%" height="15" fill="rgb(247,202,23)" fg:x="573" fg:w="2"/><text x="34.2963%" y="95.50"></text></g><g><title>realloc (2 samples, 0.12%)</title><rect x="34.0463%" y="69" width="0.1188%" height="15" fill="rgb(219,102,11)" fg:x="573" fg:w="2"/><text x="34.2963%" y="79.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="34.1058%" y="53" width="0.0594%" height="15" fill="rgb(243,110,44)" fg:x="574" fg:w="1"/><text x="34.3558%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="34.1058%" y="37" width="0.0594%" height="15" fill="rgb(222,74,54)" fg:x="574" fg:w="1"/><text x="34.3558%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.12%)</title><rect x="34.1652%" y="197" width="0.1188%" height="15" fill="rgb(216,99,12)" fg:x="575" fg:w="2"/><text x="34.4152%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.12%)</title><rect x="34.1652%" y="181" width="0.1188%" height="15" fill="rgb(226,22,26)" fg:x="575" fg:w="2"/><text x="34.4152%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.48%)</title><rect x="33.9869%" y="213" width="0.4753%" height="15" fill="rgb(217,163,10)" fg:x="572" fg:w="8"/><text x="34.2369%" y="223.50"></text></g><g><title>core::ptr::write (3 samples, 0.18%)</title><rect x="34.2840%" y="197" width="0.1783%" height="15" fill="rgb(213,25,53)" fg:x="577" fg:w="3"/><text x="34.5340%" y="207.50"></text></g><g><title>chess::game::board::Board::get_piece (11 samples, 0.65%)</title><rect x="34.4623%" y="213" width="0.6536%" height="15" fill="rgb(252,105,26)" fg:x="580" fg:w="11"/><text x="34.7123%" y="223.50"></text></g><g><title>chess::game::eval::add_rook_moves (57 samples, 3.39%)</title><rect x="31.9073%" y="245" width="3.3868%" height="15" fill="rgb(220,39,43)" fg:x="537" fg:w="57"/><text x="32.1573%" y="255.50">che..</text></g><g><title>chess::game::eval::try_add_move (42 samples, 2.50%)</title><rect x="32.7986%" y="229" width="2.4955%" height="15" fill="rgb(229,68,48)" fg:x="552" fg:w="42"/><text x="33.0486%" y="239.50">ch..</text></g><g><title>chess::game::chess_util::square_is_on_board (3 samples, 0.18%)</title><rect x="35.1159%" y="213" width="0.1783%" height="15" fill="rgb(252,8,32)" fg:x="591" fg:w="3"/><text x="35.3659%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.06%)</title><rect x="42.1866%" y="213" width="0.0594%" height="15" fill="rgb(223,20,43)" fg:x="710" fg:w="1"/><text x="42.4366%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.06%)</title><rect x="42.1866%" y="197" width="0.0594%" height="15" fill="rgb(229,81,49)" fg:x="710" fg:w="1"/><text x="42.4366%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.24%)</title><rect x="42.2460%" y="213" width="0.2377%" height="15" fill="rgb(236,28,36)" fg:x="711" fg:w="4"/><text x="42.4960%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (13 samples, 0.77%)</title><rect x="41.9489%" y="229" width="0.7724%" height="15" fill="rgb(249,185,26)" fg:x="706" fg:w="13"/><text x="42.1989%" y="239.50"></text></g><g><title>core::ptr::write (4 samples, 0.24%)</title><rect x="42.4837%" y="213" width="0.2377%" height="15" fill="rgb(249,174,33)" fg:x="715" fg:w="4"/><text x="42.7337%" y="223.50"></text></g><g><title>chess::game::board::Board::get_piece (12 samples, 0.71%)</title><rect x="42.7213%" y="229" width="0.7130%" height="15" fill="rgb(233,201,37)" fg:x="719" fg:w="12"/><text x="42.9713%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 1.13%)</title><rect x="45.2763%" y="213" width="1.1289%" height="15" fill="rgb(221,78,26)" fg:x="762" fg:w="19"/><text x="45.5263%" y="223.50"></text></g><g><title>core::ptr::write (9 samples, 0.53%)</title><rect x="45.8705%" y="197" width="0.5348%" height="15" fill="rgb(250,127,30)" fg:x="772" fg:w="9"/><text x="46.1205%" y="207.50"></text></g><g><title>chess::game::eval::add_pawn_moves (73 samples, 4.34%)</title><rect x="43.4343%" y="229" width="4.3375%" height="15" fill="rgb(230,49,44)" fg:x="731" fg:w="73"/><text x="43.6843%" y="239.50">chess..</text></g><g><title>chess::game::move::Move::new (23 samples, 1.37%)</title><rect x="46.4052%" y="213" width="1.3666%" height="15" fill="rgb(229,67,23)" fg:x="781" fg:w="23"/><text x="46.6552%" y="223.50"></text></g><g><title>chess::game::move::Move::create_move (23 samples, 1.37%)</title><rect x="46.4052%" y="197" width="1.3666%" height="15" fill="rgb(249,83,47)" fg:x="781" fg:w="23"/><text x="46.6552%" y="207.50"></text></g><g><title>chess::game::board::Board::get_piece (3 samples, 0.18%)</title><rect x="47.5936%" y="181" width="0.1783%" height="15" fill="rgb(215,43,3)" fg:x="801" fg:w="3"/><text x="47.8436%" y="191.50"></text></g><g><title>chess::game::eval::is_back_rank (9 samples, 0.53%)</title><rect x="47.7718%" y="229" width="0.5348%" height="15" fill="rgb(238,154,13)" fg:x="804" fg:w="9"/><text x="48.0218%" y="239.50"></text></g><g><title>chess::game::move::Move::new_pawn_double (4 samples, 0.24%)</title><rect x="48.3066%" y="229" width="0.2377%" height="15" fill="rgb(219,56,2)" fg:x="813" fg:w="4"/><text x="48.5566%" y="239.50"></text></g><g><title>chess::game::move::Move::create_move (4 samples, 0.24%)</title><rect x="48.3066%" y="213" width="0.2377%" height="15" fill="rgb(233,0,4)" fg:x="813" fg:w="4"/><text x="48.5566%" y="223.50"></text></g><g><title>chess::game::board::Board::get_piece (4 samples, 0.24%)</title><rect x="48.3066%" y="197" width="0.2377%" height="15" fill="rgb(235,30,7)" fg:x="813" fg:w="4"/><text x="48.5566%" y="207.50"></text></g><g><title>chess::game::eval::gen_valid_pawn_moves (258 samples, 15.33%)</title><rect x="35.2941%" y="245" width="15.3298%" height="15" fill="rgb(250,79,13)" fg:x="594" fg:w="258"/><text x="35.5441%" y="255.50">chess::game::eval::gen_..</text></g><g><title>core::cmp::PartialEq::ne (35 samples, 2.08%)</title><rect x="48.5443%" y="229" width="2.0796%" height="15" fill="rgb(211,146,34)" fg:x="817" fg:w="35"/><text x="48.7943%" y="239.50">c..</text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (35 samples, 2.08%)</title><rect x="48.5443%" y="213" width="2.0796%" height="15" fill="rgb(228,22,38)" fg:x="817" fg:w="35"/><text x="48.7943%" y="223.50">&lt;..</text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.30%)</title><rect x="52.4658%" y="229" width="0.2971%" height="15" fill="rgb(235,168,5)" fg:x="883" fg:w="5"/><text x="52.7158%" y="239.50"></text></g><g><title>&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.30%)</title><rect x="52.4658%" y="213" width="0.2971%" height="15" fill="rgb(221,155,16)" fg:x="883" fg:w="5"/><text x="52.7158%" y="223.50"></text></g><g><title>core::ops::index_range::IndexRange::next_unchecked (4 samples, 0.24%)</title><rect x="52.5253%" y="197" width="0.2377%" height="15" fill="rgb(215,215,53)" fg:x="884" fg:w="4"/><text x="52.7753%" y="207.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.06%)</title><rect x="75.8170%" y="213" width="0.0594%" height="15" fill="rgb(223,4,10)" fg:x="1276" fg:w="1"/><text x="76.0670%" y="223.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::convert::From&lt;u8&gt;&gt;::from (1 samples, 0.06%)</title><rect x="75.8170%" y="197" width="0.0594%" height="15" fill="rgb(234,103,6)" fg:x="1276" fg:w="1"/><text x="76.0670%" y="207.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (2 samples, 0.12%)</title><rect x="75.8764%" y="213" width="0.1188%" height="15" fill="rgb(227,97,0)" fg:x="1277" fg:w="2"/><text x="76.1264%" y="223.50"></text></g><g><title>chess::game::board::Board::get_piece (48 samples, 2.85%)</title><rect x="75.9952%" y="213" width="2.8520%" height="15" fill="rgb(234,150,53)" fg:x="1279" fg:w="48"/><text x="76.2452%" y="223.50">ch..</text></g><g><title>chess::game::piece::Colour::offset_rank (5 samples, 0.30%)</title><rect x="78.8473%" y="213" width="0.2971%" height="15" fill="rgb(228,201,54)" fg:x="1327" fg:w="5"/><text x="79.0973%" y="223.50"></text></g><g><title>chess::game::piece::Colour::opposite (5 samples, 0.30%)</title><rect x="79.1444%" y="213" width="0.2971%" height="15" fill="rgb(222,22,37)" fg:x="1332" fg:w="5"/><text x="79.3944%" y="223.50"></text></g><g><title>chess::game::eval::is_attacking_square (453 samples, 26.92%)</title><rect x="52.7629%" y="229" width="26.9162%" height="15" fill="rgb(237,53,32)" fg:x="888" fg:w="453"/><text x="53.0129%" y="239.50">chess::game::eval::is_attacking_square</text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add_signed (4 samples, 0.24%)</title><rect x="79.4415%" y="213" width="0.2377%" height="15" fill="rgb(233,25,53)" fg:x="1337" fg:w="4"/><text x="79.6915%" y="223.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add (4 samples, 0.24%)</title><rect x="79.4415%" y="197" width="0.2377%" height="15" fill="rgb(210,40,34)" fg:x="1337" fg:w="4"/><text x="79.6915%" y="207.50"></text></g><g><title>chess::game::eval::get_attacked_squares_surrounding_king (495 samples, 29.41%)</title><rect x="50.6239%" y="245" width="29.4118%" height="15" fill="rgb(241,220,44)" fg:x="852" fg:w="495"/><text x="50.8739%" y="255.50">chess::game::eval::get_attacked_squares_surroun..</text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add_signed (6 samples, 0.36%)</title><rect x="79.6791%" y="229" width="0.3565%" height="15" fill="rgb(235,28,35)" fg:x="1341" fg:w="6"/><text x="79.9291%" y="239.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add (6 samples, 0.36%)</title><rect x="79.6791%" y="213" width="0.3565%" height="15" fill="rgb(210,56,17)" fg:x="1341" fg:w="6"/><text x="79.9291%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.48%)</title><rect x="86.3339%" y="229" width="0.4753%" height="15" fill="rgb(224,130,29)" fg:x="1453" fg:w="8"/><text x="86.5839%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.48%)</title><rect x="86.3339%" y="213" width="0.4753%" height="15" fill="rgb(235,212,8)" fg:x="1453" fg:w="8"/><text x="86.5839%" y="223.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (8 samples, 0.48%)</title><rect x="86.3339%" y="197" width="0.4753%" height="15" fill="rgb(223,33,50)" fg:x="1453" fg:w="8"/><text x="86.5839%" y="207.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (8 samples, 0.48%)</title><rect x="86.3339%" y="181" width="0.4753%" height="15" fill="rgb(219,149,13)" fg:x="1453" fg:w="8"/><text x="86.5839%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (8 samples, 0.48%)</title><rect x="86.3339%" y="165" width="0.4753%" height="15" fill="rgb(250,156,29)" fg:x="1453" fg:w="8"/><text x="86.5839%" y="175.50"></text></g><g><title>core::ptr::read (8 samples, 0.48%)</title><rect x="86.3339%" y="149" width="0.4753%" height="15" fill="rgb(216,193,19)" fg:x="1453" fg:w="8"/><text x="86.5839%" y="159.50"></text></g><g><title>chess::game::board::Board::get_piece (2 samples, 0.12%)</title><rect x="86.8093%" y="229" width="0.1188%" height="15" fill="rgb(216,135,14)" fg:x="1461" fg:w="2"/><text x="87.0593%" y="239.50"></text></g><g><title>chess::game::chess_util::square_is_on_board (10 samples, 0.59%)</title><rect x="86.9281%" y="229" width="0.5942%" height="15" fill="rgb(241,47,5)" fg:x="1463" fg:w="10"/><text x="87.1781%" y="239.50"></text></g><g><title>chess::game::eval::is_back_two_ranks (3 samples, 0.18%)</title><rect x="87.5223%" y="229" width="0.1783%" height="15" fill="rgb(233,42,35)" fg:x="1473" fg:w="3"/><text x="87.7723%" y="239.50"></text></g><g><title>chess::game::piece::Colour::opposite (2 samples, 0.12%)</title><rect x="87.7005%" y="229" width="0.1188%" height="15" fill="rgb(231,13,6)" fg:x="1476" fg:w="2"/><text x="87.9505%" y="239.50"></text></g><g><title>chess::game::eval::get_pinned_pieces_and_king_attackers (137 samples, 8.14%)</title><rect x="80.0357%" y="245" width="8.1402%" height="15" fill="rgb(207,181,40)" fg:x="1347" fg:w="137"/><text x="80.2857%" y="255.50">chess::game..</text></g><g><title>chess::game::piece::Piece::is_colour (6 samples, 0.36%)</title><rect x="87.8194%" y="229" width="0.3565%" height="15" fill="rgb(254,173,49)" fg:x="1478" fg:w="6"/><text x="88.0694%" y="239.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (2 samples, 0.12%)</title><rect x="90.1961%" y="229" width="0.1188%" height="15" fill="rgb(221,1,38)" fg:x="1518" fg:w="2"/><text x="90.4461%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.42%)</title><rect x="90.4337%" y="213" width="0.4159%" height="15" fill="rgb(206,124,46)" fg:x="1522" fg:w="7"/><text x="90.6837%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.42%)</title><rect x="90.4337%" y="197" width="0.4159%" height="15" fill="rgb(249,21,11)" fg:x="1522" fg:w="7"/><text x="90.6837%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.42%)</title><rect x="90.4337%" y="181" width="0.4159%" height="15" fill="rgb(222,201,40)" fg:x="1522" fg:w="7"/><text x="90.6837%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.36%)</title><rect x="90.4932%" y="165" width="0.3565%" height="15" fill="rgb(235,61,29)" fg:x="1523" fg:w="6"/><text x="90.7432%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.36%)</title><rect x="90.4932%" y="149" width="0.3565%" height="15" fill="rgb(219,207,3)" fg:x="1523" fg:w="6"/><text x="90.7432%" y="159.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.36%)</title><rect x="90.4932%" y="133" width="0.3565%" height="15" fill="rgb(222,56,46)" fg:x="1523" fg:w="6"/><text x="90.7432%" y="143.50"></text></g><g><title>__rdl_realloc (5 samples, 0.30%)</title><rect x="90.5526%" y="117" width="0.2971%" height="15" fill="rgb(239,76,54)" fg:x="1524" fg:w="5"/><text x="90.8026%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5 samples, 0.30%)</title><rect x="90.5526%" y="101" width="0.2971%" height="15" fill="rgb(231,124,27)" fg:x="1524" fg:w="5"/><text x="90.8026%" y="111.50"></text></g><g><title>realloc (5 samples, 0.30%)</title><rect x="90.5526%" y="85" width="0.2971%" height="15" fill="rgb(249,195,6)" fg:x="1524" fg:w="5"/><text x="90.8026%" y="95.50"></text></g><g><title>[libc.so.6] (5 samples, 0.30%)</title><rect x="90.5526%" y="69" width="0.2971%" height="15" fill="rgb(237,174,47)" fg:x="1524" fg:w="5"/><text x="90.8026%" y="79.50"></text></g><g><title>[libc.so.6] (4 samples, 0.24%)</title><rect x="90.6120%" y="53" width="0.2377%" height="15" fill="rgb(206,201,31)" fg:x="1525" fg:w="4"/><text x="90.8620%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="90.7903%" y="37" width="0.0594%" height="15" fill="rgb(231,57,52)" fg:x="1528" fg:w="1"/><text x="91.0403%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.36%)</title><rect x="90.8497%" y="213" width="0.3565%" height="15" fill="rgb(248,177,22)" fg:x="1529" fg:w="6"/><text x="91.0997%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.36%)</title><rect x="90.8497%" y="197" width="0.3565%" height="15" fill="rgb(215,211,37)" fg:x="1529" fg:w="6"/><text x="91.0997%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.06%)</title><rect x="91.2062%" y="213" width="0.0594%" height="15" fill="rgb(241,128,51)" fg:x="1535" fg:w="1"/><text x="91.4562%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 1.60%)</title><rect x="90.3149%" y="229" width="1.6043%" height="15" fill="rgb(227,165,31)" fg:x="1520" fg:w="27"/><text x="90.5649%" y="239.50"></text></g><g><title>core::ptr::write (11 samples, 0.65%)</title><rect x="91.2656%" y="213" width="0.6536%" height="15" fill="rgb(228,167,24)" fg:x="1536" fg:w="11"/><text x="91.5156%" y="223.50"></text></g><g><title>chess::game::board::Board::get_piece (21 samples, 1.25%)</title><rect x="91.9192%" y="229" width="1.2478%" height="15" fill="rgb(228,143,12)" fg:x="1547" fg:w="21"/><text x="92.1692%" y="239.50"></text></g><g><title>chess::game::chess_util::square_is_on_board (5 samples, 0.30%)</title><rect x="93.1670%" y="229" width="0.2971%" height="15" fill="rgb(249,149,8)" fg:x="1568" fg:w="5"/><text x="93.4170%" y="239.50"></text></g><g><title>chess::game::eval::try_add_move (91 samples, 5.41%)</title><rect x="88.1759%" y="245" width="5.4070%" height="15" fill="rgb(243,35,44)" fg:x="1484" fg:w="91"/><text x="88.4259%" y="255.50">chess::..</text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add_signed (2 samples, 0.12%)</title><rect x="93.4641%" y="229" width="0.1188%" height="15" fill="rgb(246,89,9)" fg:x="1573" fg:w="2"/><text x="93.7141%" y="239.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_add (2 samples, 0.12%)</title><rect x="93.4641%" y="213" width="0.1188%" height="15" fill="rgb(233,213,13)" fg:x="1573" fg:w="2"/><text x="93.7141%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,u128)&gt;&gt; (1 samples, 0.06%)</title><rect x="93.5829%" y="245" width="0.0594%" height="15" fill="rgb(233,141,41)" fg:x="1575" fg:w="1"/><text x="93.8329%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u128)&gt;&gt; (1 samples, 0.06%)</title><rect x="93.5829%" y="229" width="0.0594%" height="15" fill="rgb(239,167,4)" fg:x="1575" fg:w="1"/><text x="93.8329%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="93.5829%" y="213" width="0.0594%" height="15" fill="rgb(209,217,16)" fg:x="1575" fg:w="1"/><text x="93.8329%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.06%)</title><rect x="93.5829%" y="197" width="0.0594%" height="15" fill="rgb(219,88,35)" fg:x="1575" fg:w="1"/><text x="93.8329%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 1.13%)</title><rect x="93.6423%" y="149" width="1.1289%" height="15" fill="rgb(220,193,23)" fg:x="1576" fg:w="19"/><text x="93.8923%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 1.13%)</title><rect x="93.6423%" y="133" width="1.1289%" height="15" fill="rgb(230,90,52)" fg:x="1576" fg:w="19"/><text x="93.8923%" y="143.50"></text></g><g><title>__rdl_dealloc (19 samples, 1.13%)</title><rect x="93.6423%" y="117" width="1.1289%" height="15" fill="rgb(252,106,19)" fg:x="1576" fg:w="19"/><text x="93.8923%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (19 samples, 1.13%)</title><rect x="93.6423%" y="101" width="1.1289%" height="15" fill="rgb(206,74,20)" fg:x="1576" fg:w="19"/><text x="93.8923%" y="111.50"></text></g><g><title>cfree (19 samples, 1.13%)</title><rect x="93.6423%" y="85" width="1.1289%" height="15" fill="rgb(230,138,44)" fg:x="1576" fg:w="19"/><text x="93.8923%" y="95.50"></text></g><g><title>[libc.so.6] (14 samples, 0.83%)</title><rect x="93.9394%" y="69" width="0.8318%" height="15" fill="rgb(235,182,43)" fg:x="1581" fg:w="14"/><text x="94.1894%" y="79.50"></text></g><g><title>chess::game::eval::get_possible_moves (1,455 samples, 86.45%)</title><rect x="8.7938%" y="261" width="86.4528%" height="15" fill="rgb(242,16,51)" fg:x="148" fg:w="1455"/><text x="9.0438%" y="271.50">chess::game::eval::get_possible_moves</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess::game::move::Move&gt;&gt; (27 samples, 1.60%)</title><rect x="93.6423%" y="245" width="1.6043%" height="15" fill="rgb(248,9,4)" fg:x="1576" fg:w="27"/><text x="93.8923%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 1.60%)</title><rect x="93.6423%" y="229" width="1.6043%" height="15" fill="rgb(210,31,22)" fg:x="1576" fg:w="27"/><text x="93.8923%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chess::game::move::Move,alloc::alloc::Global&gt;&gt; (27 samples, 1.60%)</title><rect x="93.6423%" y="213" width="1.6043%" height="15" fill="rgb(239,54,39)" fg:x="1576" fg:w="27"/><text x="93.8923%" y="223.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 1.60%)</title><rect x="93.6423%" y="197" width="1.6043%" height="15" fill="rgb(230,99,41)" fg:x="1576" fg:w="27"/><text x="93.8923%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::game::move::Move&gt;&gt; (27 samples, 1.60%)</title><rect x="93.6423%" y="181" width="1.6043%" height="15" fill="rgb(253,106,12)" fg:x="1576" fg:w="27"/><text x="93.8923%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 1.60%)</title><rect x="93.6423%" y="165" width="1.6043%" height="15" fill="rgb(213,46,41)" fg:x="1576" fg:w="27"/><text x="93.8923%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.48%)</title><rect x="94.7712%" y="149" width="0.4753%" height="15" fill="rgb(215,133,35)" fg:x="1595" fg:w="8"/><text x="95.0212%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.83%)</title><rect x="95.3060%" y="213" width="0.8318%" height="15" fill="rgb(213,28,5)" fg:x="1604" fg:w="14"/><text x="95.5560%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.83%)</title><rect x="95.3060%" y="197" width="0.8318%" height="15" fill="rgb(215,77,49)" fg:x="1604" fg:w="14"/><text x="95.5560%" y="207.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.83%)</title><rect x="95.3060%" y="181" width="0.8318%" height="15" fill="rgb(248,100,22)" fg:x="1604" fg:w="14"/><text x="95.5560%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.83%)</title><rect x="95.3060%" y="165" width="0.8318%" height="15" fill="rgb(208,67,9)" fg:x="1604" fg:w="14"/><text x="95.5560%" y="175.50"></text></g><g><title>cfree (14 samples, 0.83%)</title><rect x="95.3060%" y="149" width="0.8318%" height="15" fill="rgb(219,133,21)" fg:x="1604" fg:w="14"/><text x="95.5560%" y="159.50"></text></g><g><title>[libc.so.6] (4 samples, 0.24%)</title><rect x="95.9002%" y="133" width="0.2377%" height="15" fill="rgb(246,46,29)" fg:x="1614" fg:w="4"/><text x="96.1502%" y="143.50"></text></g><g><title>chess::game::eval::get_num_moves (1,484 samples, 88.18%)</title><rect x="8.4373%" y="277" width="88.1759%" height="15" fill="rgb(246,185,52)" fg:x="142" fg:w="1484"/><text x="8.6873%" y="287.50">chess::game::eval::get_num_moves</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::game::move::Move&gt;&gt; (23 samples, 1.37%)</title><rect x="95.2466%" y="261" width="1.3666%" height="15" fill="rgb(252,136,11)" fg:x="1603" fg:w="23"/><text x="95.4966%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::game::move::Move&gt;&gt; (23 samples, 1.37%)</title><rect x="95.2466%" y="245" width="1.3666%" height="15" fill="rgb(219,138,53)" fg:x="1603" fg:w="23"/><text x="95.4966%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.37%)</title><rect x="95.2466%" y="229" width="1.3666%" height="15" fill="rgb(211,51,23)" fg:x="1603" fg:w="23"/><text x="95.4966%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.48%)</title><rect x="96.1378%" y="213" width="0.4753%" height="15" fill="rgb(247,221,28)" fg:x="1618" fg:w="8"/><text x="96.3878%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="97.0885%" y="261" width="0.0594%" height="15" fill="rgb(251,222,45)" fg:x="1634" fg:w="1"/><text x="97.3385%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.06%)</title><rect x="97.1480%" y="261" width="0.0594%" height="15" fill="rgb(217,162,53)" fg:x="1635" fg:w="1"/><text x="97.3980%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="97.1480%" y="245" width="0.0594%" height="15" fill="rgb(229,93,14)" fg:x="1635" fg:w="1"/><text x="97.3980%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.06%)</title><rect x="97.2074%" y="261" width="0.0594%" height="15" fill="rgb(209,67,49)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="97.2074%" y="245" width="0.0594%" height="15" fill="rgb(213,87,29)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="97.2074%" y="229" width="0.0594%" height="15" fill="rgb(205,151,52)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.06%)</title><rect x="97.2074%" y="213" width="0.0594%" height="15" fill="rgb(253,215,39)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.06%)</title><rect x="97.2074%" y="197" width="0.0594%" height="15" fill="rgb(221,220,41)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="97.2074%" y="181" width="0.0594%" height="15" fill="rgb(218,133,21)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.06%)</title><rect x="97.2074%" y="165" width="0.0594%" height="15" fill="rgb(221,193,43)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="97.2074%" y="149" width="0.0594%" height="15" fill="rgb(240,128,52)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="97.2074%" y="133" width="0.0594%" height="15" fill="rgb(253,114,12)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="143.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="97.2074%" y="117" width="0.0594%" height="15" fill="rgb(215,223,47)" fg:x="1636" fg:w="1"/><text x="97.4574%" y="127.50"></text></g><g><title>chess::game::eval::add_bishop_moves (2 samples, 0.12%)</title><rect x="97.2668%" y="261" width="0.1188%" height="15" fill="rgb(248,225,23)" fg:x="1637" fg:w="2"/><text x="97.5168%" y="271.50"></text></g><g><title>chess::game::eval::try_add_move (1 samples, 0.06%)</title><rect x="97.3262%" y="245" width="0.0594%" height="15" fill="rgb(250,108,0)" fg:x="1638" fg:w="1"/><text x="97.5762%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.06%)</title><rect x="97.3262%" y="229" width="0.0594%" height="15" fill="rgb(228,208,7)" fg:x="1638" fg:w="1"/><text x="97.5762%" y="239.50"></text></g><g><title>core::ptr::write (1 samples, 0.06%)</title><rect x="97.3262%" y="213" width="0.0594%" height="15" fill="rgb(244,45,10)" fg:x="1638" fg:w="1"/><text x="97.5762%" y="223.50"></text></g><g><title>chess::game::eval::add_rook_moves (4 samples, 0.24%)</title><rect x="97.3856%" y="261" width="0.2377%" height="15" fill="rgb(207,125,25)" fg:x="1639" fg:w="4"/><text x="97.6356%" y="271.50"></text></g><g><title>chess::game::eval::try_add_move (2 samples, 0.12%)</title><rect x="97.5045%" y="245" width="0.1188%" height="15" fill="rgb(210,195,18)" fg:x="1641" fg:w="2"/><text x="97.7545%" y="255.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="97.5639%" y="229" width="0.0594%" height="15" fill="rgb(249,80,12)" fg:x="1642" fg:w="1"/><text x="97.8139%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.06%)</title><rect x="97.6827%" y="245" width="0.0594%" height="15" fill="rgb(221,65,9)" fg:x="1644" fg:w="1"/><text x="97.9327%" y="255.50"></text></g><g><title>chess::game::board::Board::get_piece (1 samples, 0.06%)</title><rect x="97.7421%" y="245" width="0.0594%" height="15" fill="rgb(235,49,36)" fg:x="1645" fg:w="1"/><text x="97.9921%" y="255.50"></text></g><g><title>chess::game::eval::add_pawn_moves (1 samples, 0.06%)</title><rect x="97.8015%" y="245" width="0.0594%" height="15" fill="rgb(225,32,20)" fg:x="1646" fg:w="1"/><text x="98.0515%" y="255.50"></text></g><g><title>chess::game::move::Move::new_pawn_double (1 samples, 0.06%)</title><rect x="97.8610%" y="245" width="0.0594%" height="15" fill="rgb(215,141,46)" fg:x="1647" fg:w="1"/><text x="98.1110%" y="255.50"></text></g><g><title>chess::game::move::Move::create_move (1 samples, 0.06%)</title><rect x="97.8610%" y="229" width="0.0594%" height="15" fill="rgb(250,160,47)" fg:x="1647" fg:w="1"/><text x="98.1110%" y="239.50"></text></g><g><title>chess::game::board::Board::get_piece (1 samples, 0.06%)</title><rect x="97.8610%" y="213" width="0.0594%" height="15" fill="rgb(216,222,40)" fg:x="1647" fg:w="1"/><text x="98.1110%" y="223.50"></text></g><g><title>chess::game::eval::gen_valid_pawn_moves (6 samples, 0.36%)</title><rect x="97.6233%" y="261" width="0.3565%" height="15" fill="rgb(234,217,39)" fg:x="1643" fg:w="6"/><text x="97.8733%" y="271.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.06%)</title><rect x="97.9204%" y="245" width="0.0594%" height="15" fill="rgb(207,178,40)" fg:x="1648" fg:w="1"/><text x="98.1704%" y="255.50"></text></g><g><title>&lt;chess::game::piece::Piece as core::cmp::PartialEq&gt;::eq (1 samples, 0.06%)</title><rect x="97.9204%" y="229" width="0.0594%" height="15" fill="rgb(221,136,13)" fg:x="1648" fg:w="1"/><text x="98.1704%" y="239.50"></text></g><g><title>chess::game::eval::get_attacked_squares_surrounding_king (16 samples, 0.95%)</title><rect x="97.9798%" y="261" width="0.9507%" height="15" fill="rgb(249,199,10)" fg:x="1649" fg:w="16"/><text x="98.2298%" y="271.50"></text></g><g><title>chess::game::eval::is_attacking_square (16 samples, 0.95%)</title><rect x="97.9798%" y="245" width="0.9507%" height="15" fill="rgb(249,222,13)" fg:x="1649" fg:w="16"/><text x="98.2298%" y="255.50"></text></g><g><title>chess::game::board::Board::get_piece (4 samples, 0.24%)</title><rect x="98.6928%" y="229" width="0.2377%" height="15" fill="rgb(244,185,38)" fg:x="1661" fg:w="4"/><text x="98.9428%" y="239.50"></text></g><g><title>chess::game::chess_util::square_is_on_board (1 samples, 0.06%)</title><rect x="99.2276%" y="245" width="0.0594%" height="15" fill="rgb(236,202,9)" fg:x="1670" fg:w="1"/><text x="99.4776%" y="255.50"></text></g><g><title>chess::game::eval::get_pinned_pieces_and_king_attackers (10 samples, 0.59%)</title><rect x="98.9305%" y="261" width="0.5942%" height="15" fill="rgb(250,229,37)" fg:x="1665" fg:w="10"/><text x="99.1805%" y="271.50"></text></g><g><title>chess::game::piece::Piece::is_colour (4 samples, 0.24%)</title><rect x="99.2870%" y="245" width="0.2377%" height="15" fill="rgb(206,174,23)" fg:x="1671" fg:w="4"/><text x="99.5370%" y="255.50"></text></g><g><title>chess::game::eval::try_add_move (2 samples, 0.12%)</title><rect x="99.5247%" y="261" width="0.1188%" height="15" fill="rgb(211,33,43)" fg:x="1675" fg:w="2"/><text x="99.7747%" y="271.50"></text></g><g><title>chess::game::board::Board::get_piece (1 samples, 0.06%)</title><rect x="99.5841%" y="245" width="0.0594%" height="15" fill="rgb(245,58,50)" fg:x="1676" fg:w="1"/><text x="99.8341%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,u128)&gt;&gt; (1 samples, 0.06%)</title><rect x="99.6435%" y="261" width="0.0594%" height="15" fill="rgb(244,68,36)" fg:x="1677" fg:w="1"/><text x="99.8935%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,u128)&gt;&gt; (1 samples, 0.06%)</title><rect x="99.6435%" y="245" width="0.0594%" height="15" fill="rgb(232,229,15)" fg:x="1677" fg:w="1"/><text x="99.8935%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.6435%" y="229" width="0.0594%" height="15" fill="rgb(254,30,23)" fg:x="1677" fg:w="1"/><text x="99.8935%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.06%)</title><rect x="99.6435%" y="213" width="0.0594%" height="15" fill="rgb(235,160,14)" fg:x="1677" fg:w="1"/><text x="99.8935%" y="223.50"></text></g><g><title>chess::game::eval::get_possible_moves (53 samples, 3.15%)</title><rect x="96.6132%" y="277" width="3.1491%" height="15" fill="rgb(212,155,44)" fg:x="1626" fg:w="53"/><text x="96.8632%" y="287.50">che..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;chess::game::move::Move&gt;&gt; (1 samples, 0.06%)</title><rect x="99.7029%" y="261" width="0.0594%" height="15" fill="rgb(226,2,50)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.7029%" y="245" width="0.0594%" height="15" fill="rgb(234,177,6)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;chess::game::move::Move,alloc::alloc::Global&gt;&gt; (1 samples, 0.06%)</title><rect x="99.7029%" y="229" width="0.0594%" height="15" fill="rgb(217,24,9)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.7029%" y="213" width="0.0594%" height="15" fill="rgb(220,13,46)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::game::move::Move&gt;&gt; (1 samples, 0.06%)</title><rect x="99.7029%" y="197" width="0.0594%" height="15" fill="rgb(239,221,27)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.7029%" y="181" width="0.0594%" height="15" fill="rgb(222,198,25)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="99.7029%" y="165" width="0.0594%" height="15" fill="rgb(211,99,13)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="99.7029%" y="149" width="0.0594%" height="15" fill="rgb(232,111,31)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="159.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="99.7029%" y="133" width="0.0594%" height="15" fill="rgb(245,82,37)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="99.7029%" y="117" width="0.0594%" height="15" fill="rgb(227,149,46)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="127.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="99.7029%" y="101" width="0.0594%" height="15" fill="rgb(218,36,50)" fg:x="1678" fg:w="1"/><text x="99.9529%" y="111.50"></text></g><g><title>chess::game::eval::get_num_moves (1,667 samples, 99.05%)</title><rect x="0.7724%" y="293" width="99.0493%" height="15" fill="rgb(226,80,48)" fg:x="13" fg:w="1667"/><text x="1.0224%" y="303.50">chess::game::eval::get_num_moves</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::game::move::Move&gt;&gt; (1 samples, 0.06%)</title><rect x="99.7623%" y="277" width="0.0594%" height="15" fill="rgb(238,224,15)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::game::move::Move&gt;&gt; (1 samples, 0.06%)</title><rect x="99.7623%" y="261" width="0.0594%" height="15" fill="rgb(241,136,10)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.7623%" y="245" width="0.0594%" height="15" fill="rgb(208,32,45)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="99.7623%" y="229" width="0.0594%" height="15" fill="rgb(207,135,9)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="99.7623%" y="213" width="0.0594%" height="15" fill="rgb(206,86,44)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="223.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="99.7623%" y="197" width="0.0594%" height="15" fill="rgb(245,177,15)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="99.7623%" y="181" width="0.0594%" height="15" fill="rgb(206,64,50)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="191.50"></text></g><g><title>cfree (1 samples, 0.06%)</title><rect x="99.7623%" y="165" width="0.0594%" height="15" fill="rgb(234,36,40)" fg:x="1679" fg:w="1"/><text x="100.0123%" y="175.50"></text></g><g><title>chess::game::eval::get_attacked_squares_surrounding_king (1 samples, 0.06%)</title><rect x="99.8217%" y="277" width="0.0594%" height="15" fill="rgb(213,64,8)" fg:x="1680" fg:w="1"/><text x="100.0717%" y="287.50"></text></g><g><title>chess::game::eval::is_attacking_square (1 samples, 0.06%)</title><rect x="99.8217%" y="261" width="0.0594%" height="15" fill="rgb(210,75,36)" fg:x="1680" fg:w="1"/><text x="100.0717%" y="271.50"></text></g><g><title>chess::game::eval::get_num_moves (1,675 samples, 99.52%)</title><rect x="0.4159%" y="309" width="99.5247%" height="15" fill="rgb(229,88,21)" fg:x="7" fg:w="1675"/><text x="0.6659%" y="319.50">chess::game::eval::get_num_moves</text></g><g><title>chess::game::eval::get_possible_moves (2 samples, 0.12%)</title><rect x="99.8217%" y="293" width="0.1188%" height="15" fill="rgb(252,204,47)" fg:x="1680" fg:w="2"/><text x="100.0717%" y="303.50"></text></g><g><title>chess::game::eval::try_add_move (1 samples, 0.06%)</title><rect x="99.8812%" y="277" width="0.0594%" height="15" fill="rgb(208,77,27)" fg:x="1681" fg:w="1"/><text x="100.1312%" y="287.50"></text></g><g><title>all (1,683 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="1683"/><text x="0.2500%" y="431.50"></text></g><g><title>chess (1,683 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="1683"/><text x="0.2500%" y="415.50">chess</text></g><g><title>[unknown] (1,676 samples, 99.58%)</title><rect x="0.4159%" y="389" width="99.5841%" height="15" fill="rgb(230,137,11)" fg:x="7" fg:w="1676"/><text x="0.6659%" y="399.50">[unknown]</text></g><g><title>chess::main (1,676 samples, 99.58%)</title><rect x="0.4159%" y="373" width="99.5841%" height="15" fill="rgb(212,28,1)" fg:x="7" fg:w="1676"/><text x="0.6659%" y="383.50">chess::main</text></g><g><title>chess::perft (1,676 samples, 99.58%)</title><rect x="0.4159%" y="357" width="99.5841%" height="15" fill="rgb(248,164,17)" fg:x="7" fg:w="1676"/><text x="0.6659%" y="367.50">chess::perft</text></g><g><title>chess::game::eval::get_num_moves (1,676 samples, 99.58%)</title><rect x="0.4159%" y="341" width="99.5841%" height="15" fill="rgb(222,171,42)" fg:x="7" fg:w="1676"/><text x="0.6659%" y="351.50">chess::game::eval::get_num_moves</text></g><g><title>chess::game::eval::get_num_moves (1,676 samples, 99.58%)</title><rect x="0.4159%" y="325" width="99.5841%" height="15" fill="rgb(243,84,45)" fg:x="7" fg:w="1676"/><text x="0.6659%" y="335.50">chess::game::eval::get_num_moves</text></g><g><title>chess::game::eval::get_possible_moves (1 samples, 0.06%)</title><rect x="99.9406%" y="309" width="0.0594%" height="15" fill="rgb(252,49,23)" fg:x="1682" fg:w="1"/><text x="100.1906%" y="319.50"></text></g><g><title>chess::game::eval::get_attacked_squares_surrounding_king (1 samples, 0.06%)</title><rect x="99.9406%" y="293" width="0.0594%" height="15" fill="rgb(215,19,7)" fg:x="1682" fg:w="1"/><text x="100.1906%" y="303.50"></text></g><g><title>chess::game::eval::is_attacking_square (1 samples, 0.06%)</title><rect x="99.9406%" y="277" width="0.0594%" height="15" fill="rgb(238,81,41)" fg:x="1682" fg:w="1"/><text x="100.1906%" y="287.50"></text></g></svg></svg>